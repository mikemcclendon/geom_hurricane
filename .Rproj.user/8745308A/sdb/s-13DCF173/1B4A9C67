{
    "collab_server" : "",
    "contents" : "library(dplyr)\nlibrary(maps)\nlibrary(graphics)\nlibrary(stats)\n\n\n#' Read in NHTSA FARS dataset CSV file as a data frame table (tbl_df) object\n#'\n#' This is a function that takes a filename of a CSV as an argument and reads it in\n#' as a data frame table. Successful execution will result in a data frame table\n#' object containing the CSV data.\n#'\n#' @details It will first check if the filename is valid and print a\n#' warning and stop if it is not. The function will generate an error for invalid CSV\n#' inputs.\n#'\n#' @param filename A string filename that corresponds to the CSV to be read in\n#'\n#' @importFrom readr read_csv\n#' @importFrom dplyr tbl_df\n#'\n#' @return This function returns a tbl_df object\n#'\n#' @examples\n#' \\dontrun{\n#' fars_read('accident_2013.csv.bz2')\n#' }\n#' @export\n\nfars_read <- function(filename) {\n          if(!file.exists(filename))\n                stop(\"file '\", filename, \"' does not exist\")\n        data <- suppressMessages({\n                readr::read_csv(filename, progress = FALSE)\n        })\n        dplyr::tbl_df(data)\n}\n\n#' Print a filename based on the value of the year argument passed to the function\n#'\n#' This is a function that takes a year in the form of an integer or string as an argument\n#' and then uses that value to print a standard filename for data of that given year.\n#'\n#' @details Errors: This function will result in errors to the functions that call it as a helper if values other\n#' years or other than years for which there is data are passed.\n#'\n#' @param year A year passed as an argument in the form of an integer or string for which\n#' the filename should be labeled and formatted\n#'\n#'\n#' @return This function returns a string\n#'\n#' @examples\n#' \\dontrun{\n#' make_filename(2013)\n#' make_filename('2013')\n#' }\n#'\n#' @export\n\nmake_filename <- function(year) {\n        year <- as.integer(year)\n        sprintf(\"accident_%d.csv.bz2\", year)\n}\n\n#' Return the month and year corresponding to each FARS observation\n#'\n#' This is a function that takes a year in the form of an integer or string as an argument\n#' and then uses that value to read in a CSV as a tbl_df for data of that given year and\n#' and returns the month and year corresponding to each observation.\n#'\n#' @details This function will return an error message for invalid years.\n#'\n#' @param years A year passed as an argument in the form of an integer or string for which\n#' the data should be read in\n#'\n#' @importFrom dplyr %>% mutate select\n#' @importFrom stats setNames\n#'\n#' @return This function returns a list\n#'\n#' @examples\n#' \\dontrun{\n#' fars_read_years(2013)\n#' fars_read_years('2013')\n#' }\n#'\n#' @export\n\nfars_read_years <- function(years) {\n        year <- NULL\n        MONTH <- NULL\n        lapply(years, function(year) {\n                file <- make_filename(year)\n                tryCatch({\n                        dat <- fars_read(file)\n                        dplyr::mutate(dat, year = year) %>%\n                                dplyr::select(MONTH, year)\n                }, error = function(e) {\n                        warning(\"invalid year: \", year)\n                        return(NULL)\n                })\n        })\n}\n\n#' Return a monthly summary of incidents\n#'\n#' This is a function that takes a year in the form of an integer or string as an argument\n#' and then uses that value to read in a CSV as a tbl_df for data of that given year and\n#' and returns a monthly summary of the observations.\n#'\n#' @details This function will return an error message for invalid years.\n#'\n#' @param years A year passed as an argument in the form of an integer or string for which\n#' the data should be read in.\n#'\n#' @importFrom dplyr %>% group_by bind_rows summarize\n#' @importFrom tidyr spread\n#' @importFrom stats setNames\n#'\n#'\n#' @return This function returns a tbl_df object\n#'\n#' @examples\n#' \\dontrun{\n#' fars_summarize_years(2013)\n#' fars_summarize_years('2013')\n#' }\n#'\n#' @export\n\nfars_summarize_years <- function(years) {\n        MONTH <- NULL\n        n <- NULL\n        year <- NULL\n        dat_list <- fars_read_years(years)\n        dplyr::bind_rows(dat_list) %>%\n                dplyr::group_by(year, MONTH) %>%\n                dplyr::summarize(n = n()) %>%\n                tidyr::spread(year, n)\n}\n\n#' Return a map plot of incidents.\n#'\n#' This is a function that takes a state number and year in the form of an integer or string as\n#' an argument and then uses that value to generate a map plot of observations for that state.\n#' and year.\n#'\n#' @details This function will return an error message for invalid years, invalid state numbers,\n#' and if there are no accidents to plot\n#'\n#' @param state.num A numeric or string that corresponds to a\n#' given state in the data set.\n#' @param year A year passed as an argument in the form of an integer or string for which\n#' the data should be read in.\n#'\n#' @importFrom maps map\n#' @importFrom dplyr filter\n#' @importFrom graphics points\n#'\n#'\n#' @return This function returns a plot of observations in the selected state will NULL\n#' class\n#'\n#' @examples\n#' \\dontrun{\n#' fars_map_state(20, 2013)\n#' fars_map_state('20','2013')\n#' }\n#'\n#' @export\n\nfars_map_state <- function(state.num, year) {\n        STATE <- NULL\n        filename <- make_filename(year)\n        data <- fars_read(filename)\n        state.num <- as.integer(state.num)\n\n        if(!(state.num %in% unique(data$STATE)))\n                stop(\"invalid STATE number: \", state.num)\n        data.sub <- dplyr::filter(data, STATE == state.num)\n        if(nrow(data.sub) == 0L) {\n                message(\"no accidents to plot\")\n                return(invisible(NULL))\n        }\n        is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n        is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n        with(data.sub, {\n                maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n                          xlim = range(LONGITUD, na.rm = TRUE))\n                graphics::points(LONGITUD, LATITUDE, pch = 46)\n        })\n}\n",
    "created" : 1494792785478.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1293571176",
    "id" : "1B4A9C67",
    "lastKnownWriteTime" : 1493394750,
    "last_content_update" : 1493394750,
    "path" : "~/projects/Coursera Mastering R/farsfunctions/R/fars_functions.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}